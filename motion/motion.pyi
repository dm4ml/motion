from typing import Any, Dict, List, Optional, Tuple
from pyo3 import PyObject

class StateAccessor:
    component_name: str
    instance_id: str
    lock_duration: int
    client: Any  # Figure out redis type
    cache: Dict[str, PyObject]
    lock_manager: Any  # Figure out redis type
    max_lock_attempts: int

    def __init__(
        self,
        component_name: str,
        instance_id: str,
        lock_duration: int,
        redis_host: str,
        redis_port: int,
        redis_db: int,
        redis_password: Optional[str] = None,
        redis_ssl: Optional[bool] = None,
    ) -> None: ...
    @property
    def version(self) -> int: ...
    def set(self, key: str, value: Any) -> None: ...
    def bulk_set(self, items: Dict[str, Any], from_migration: bool = False) -> None: ...
    def get(self, key: str) -> Any: ...
    def items(self) -> List[Tuple[str, Any]]: ...
    def keys(self) -> List[str]: ...
    def values(self) -> List[Any]: ...
    def clear_cache(self) -> None: ...

class TempValue:
    def __init__(self, value: PyObject, ttl: int) -> None: ...
    @property
    def value(self) -> PyObject: ...
    @property
    def ttl(self) -> int: ...
    @ttl.setter
    def ttl(self, new_ttl: int) -> None: ...
